/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ibm.api;

import com.ibm.model.HTTPError;
import com.ibm.model.InitiatePaymentExecutionProcedureRequest;
import com.ibm.model.InitiatePaymentExecutionProcedureResponse;
import com.ibm.model.RetrievePaymentExecutionProcedureResponse;
import com.ibm.model.UpdatePaymentExecutionProcedureRequest;
import com.ibm.model.UpdatePaymentExecutionProcedureResponse;
import io.swagger.annotations.*;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Validated
@Api(value = "CrPaymentExecutionProcedure", description = "the CrPaymentExecutionProcedure API")
public interface CrPaymentExecutionProcedureApi {
    

  @ApiOperation(value = "InCR Initiate a payment execution procedure", nickname = "initiate", notes = "InCR Initiate a payment execution procedure", response = InitiatePaymentExecutionProcedureResponse.class , tags = { "CR - PaymentExecutionProcedure" }  )
    @ApiResponses({ @ApiResponse(code = 200, message = "InitiatePaymentExecutionProcedureResponse", response = InitiatePaymentExecutionProcedureResponse.class),@ApiResponse(code = 400, message = "BadRequest", response = HTTPError.class),@ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),@ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),@ApiResponse(code = 404, message = "NotFound", response = HTTPError.class),@ApiResponse(code = 429, message = "TooManyRequests", response = HTTPError.class),@ApiResponse(code = 500, message = "InternalServerError", response = HTTPError.class) })
     @RequestMapping(method = RequestMethod.POST,
            value = "/PaymentExecution/Initiate",
            produces = { "application/json" },
            consumes = { "application/json" })
    ResponseEntity<InitiatePaymentExecutionProcedureResponse> initiate(@Parameter(name = "InitiatePaymentExecutionProcedureRequest", description = "", required = true) @Valid @RequestBody InitiatePaymentExecutionProcedureRequest initiatePaymentExecutionProcedureRequest);
      

  @ApiOperation(value = "ReCR Retrieve details about a payment execution instruction", nickname = "retrieve", notes = "ReCR Retrieve details about a payment execution instruction", response = RetrievePaymentExecutionProcedureResponse.class , tags = { "CR - PaymentExecutionProcedure" }  )
    @ApiResponses({ @ApiResponse(code = 200, message = "RetrievePaymentExecutionProcedureResponse", response = RetrievePaymentExecutionProcedureResponse.class),@ApiResponse(code = 400, message = "BadRequest", response = HTTPError.class),@ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),@ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),@ApiResponse(code = 404, message = "NotFound", response = HTTPError.class),@ApiResponse(code = 429, message = "TooManyRequests", response = HTTPError.class),@ApiResponse(code = 500, message = "InternalServerError", response = HTTPError.class) })
     @RequestMapping(method = RequestMethod.GET,
            value = "/PaymentExecution/{paymentexecutionid}/Retrieve",
            produces = { "application/json" })
    ResponseEntity<RetrievePaymentExecutionProcedureResponse> retrieve(@Parameter(name = "paymentexecutionid", description = "", required = true, in = ParameterIn.PATH) @PathVariable("paymentexecutionid") String paymentexecutionid);
      

  @ApiOperation(value = "UpCR Update details of a payment execution instruction", nickname = "update", notes = "UpCR Update details of a payment execution instruction", response = UpdatePaymentExecutionProcedureResponse.class , tags = { "CR - PaymentExecutionProcedure" }  )
    @ApiResponses({ @ApiResponse(code = 200, message = "UpdatePaymentExecutionProcedureResponse", response = UpdatePaymentExecutionProcedureResponse.class),@ApiResponse(code = 400, message = "BadRequest", response = HTTPError.class),@ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),@ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),@ApiResponse(code = 404, message = "NotFound", response = HTTPError.class),@ApiResponse(code = 429, message = "TooManyRequests", response = HTTPError.class),@ApiResponse(code = 500, message = "InternalServerError", response = HTTPError.class) })
     @RequestMapping(method = RequestMethod.PUT,
            value = "/PaymentExecution/{paymentexecutionid}/Update",
            produces = { "application/json" },
            consumes = { "application/json" })
    ResponseEntity<UpdatePaymentExecutionProcedureResponse> update(@Parameter(name = "paymentexecutionid", description = "", required = true, in = ParameterIn.PATH) @PathVariable("paymentexecutionid") String paymentexecutionid,@Parameter(name = "UpdatePaymentExecutionProcedureRequest", description = "", required = true) @Valid @RequestBody UpdatePaymentExecutionProcedureRequest updatePaymentExecutionProcedureRequest);
      
}
